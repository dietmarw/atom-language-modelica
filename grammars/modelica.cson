'fileTypes': [
  'mo'
  'mos'
]
'foldingStartMarker': '/\\*\\*(?!\\*)|\\{\\s*($|/\\*(?!.*?\\*/.*\\S))'
'foldingStopMarker': '(?<!\\*)\\*\\*/|^\\s*\\}'
'name': 'Modelica'
'scopeName': 'source.modelica'
'patterns': [
    {
        'include': '#typedef'
    }
    {
        'include': '#modelicawi'
    }
    {
        'include': '#comments'
    }
    
    {
        'begin': '"'
        'beginCaptures':
            '0':
                'name': 'string.quoted.begin.modelica'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'string.quoted.end.modelica'
        'name': 'string.quoted.double.modelica'
        'patterns': [
          {
            'include': '#string_escaped_char'
          }
          {
            'include': '#string_placeholder'
          }
        ]
    }
    
]
'repository':
    'modelicawi':
        'patterns': [
            {
                'match': '\\b(within)\\b'
                'name': 'keyword.other.modelica'
            }
        ]
    'typedef':
        'patterns': [
            {
                'begin': '\\b(package|class|model|function|record|block)\\b [a-zA-Z0-9_]+\\b'
                'beginCaptures':
                    '0':
                        'name': 'entity.name.type.modelica'
                    '1':
                        'name': 'storage.type.modelica'
                'end': '\\b(end)\\b [a-zA-Z0-9_]+\\b'
                'EndCaptures':
                    '0':
                        'name': 'entity.name.function.modelica'
                    '1':
                        'name': 'storage.type.modelica'
                'patterns': [
                    {
                        'include': '$self'
                    }
                    {
                        'include': '#featuredef'
                    }
                    {
                        'include': '#modelicaeqal'
                    }
                ]
            }
        ]
    'featuredef':
        'patterns': [
            {
                'match': '\\b(private|protected|public)\\b'
                'name': 'storage.modifier.modelica'
            }
            {
                'match': '\\b(Boolean|uniontype|list|String|Option|tuple|parallel|Enum|Real|Integer)\\b'
                'name': 'support.type.modelica'
            }
            {
                'include': '#modifier'
            }
            {
                'include': '#modelicafeatureopt'
            }
            {
                'include': '#modelicavar'
            }
            {
                'include': '#operators'
            }
            {
                'include': '#comments'
            }
            {
                'include': '#values'
            }
        ]
    'values':
        'patterns': [
            {
                'match': '\\b(NULL|true|false|TRUE|FALSE)\\b'
                'name': 'constant.language.modelica'
            }
            {
                'match': '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
                'name': 'constant.numeric.modelica'
            }
        ]
    'operators':
        'patterns': [
            {
                'match': '\\b(\\+|\\-|in|\\/|and|or|\\<|\\>|\\<\\=|\\=\\=|\\>\\=)\\b'
                'name': 'keyword.operator.modelica'
            }
        ]
    'modelicafuncall':
        'patterns': [
            {
                'match': '\\b(der|pre|pow|connect|change|edge|reinit|size)\\b'
                'name': 'support.function.modelica'
            }
    ]
    'modelicaeqal':
        'patterns': [
            {
                'begin': '\\b(equation|algorithm)\\b'
                'beginCaptures':
                    '0':
                        'name': 'keyword.other.modelica'
                'end': '\\b(end)\\b'
                'patterns': [
                    {
                        'include': '#control'
                    }
                    {
                        'include': '#modelicafuncall'
                    }
                    {
                        'include': '#comments'
                    }
                    {
                        'include': '#values'
                    }
                ]
            }
        ]
    'modelicafeatureopt':
        'patterns': [
            {
                'match': '\\b(start|min|max)\\b'
                'name': 'keyword.other.modelica'
            }
        ]
    'modelicavar':
        'patterns': [
            {
                'match': '\\bg[A-Z]\\w*\\b'
                'name': 'variable.other.readwrite.modelica'
            }
        ]
    'control':
        'patterns': [
            {
                'match': '\\b(loop|do|else|if|then|end|return)\\b'
                'name': 'keyword.control.modelica'
            }
            {
                'begin': '\\b(when|for|while)\\b'
                'beginCaptures':
                    '0':
                        'name': 'keyword.control.modelica'
                'end': '\\b(end)\\b(when|for|while)\\b'
                'EndCaptures':
                    '0':
                        'name': 'keyword.control.modelica'
                    '1':
                        'name': 'keyword.control.modelica'
                'patterns': [
                    {
                        'include': '#control'
                    }
                    {
                        'include': '#modelicafuncall'
                    }
                    {
                        'include': '#comments'
                    }
                    {
                        'include': '#values'
                    }
                    {
                        'include': '#operators'
                    }
                ]
            }
        ]
    'modifier':
        'patterns': [
            {
                'match': '\\b(within|parameter|replaceable|redeclare|partial|discrete|extends|import|connect|input|output|constant)\\b'
                'name': 'storage.modifier.modelica'
            }
        ]
    'comments':
        'patterns': [
            {
                'begin': '/\\*'
                'beginCaptures':
                  '0':
                    'name': 'comment.block.begin.modelica'
                'end': '\\*/'
                'endCaptures':
                    '0':
                        'name': 'comment.block.end.modelica'
                'name': 'comment.block.modelica'
            }
            {
                'begin': '//'
                'beginCaptures':
                    '0':
                        'name': 'comment.line.modelica'
                'end': '\\n'
                'name': 'comment.line.double-slash.modelica'
                'patterns': [
                    {
                        'match': '(?>\\\\\\s*\\n)'
                        'name': 'punctuation.separator.continuation.modelica'
                    }
                ]
            }
        ]
    'string_escaped_char':
        'patterns': [
            {
                'match': '\\\\(\\\\|[abefnprtv\'"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})'
                'name': 'constant.character.escape.modelica'
            }
            {
                'match': '\\\\.'
                'name': 'invalid.illegal.unknown-escape.modelica'
            }
        ]
    'string_placeholder':
        'patterns': [
            {
                'match': '(?x)%\n \t\t\t\t\t\t(\\d+\\$)? # field (argument #)\n \t\t\t\t\t\t[#0\\- +\']* # flags\n \t\t\t\t\t\t[,;:_]? # separator character (AltiVec)\n \t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)? # minimum field width\n \t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)? # precision\n \t\t\t\t\t\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n \t\t\t\t\t\t[diouxXDOUeEfFgGaACcSspn%] # conversion type\n \t\t\t\t\t'
                'name': 'constant.other.placeholder.modelica'
            }
            {
                'match': '%'
                'name': 'invalid.illegal.placeholder.modelica'
            }
        ]